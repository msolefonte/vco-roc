-- WORK IN PROGRESS

narrative.get(faction_key, name .. "_event_listeners") or {
    {
        event = "ScriptEventTrackedPooledResourceChanged",
        condition =	function(context)
            return context:has_faction() and
                context:faction():name() == faction_key and
                context:resource():key() == pr_meat_key and
                context:factor():key() == "offered_to_the_great_maw" and
                context:factor_spent() > 50;
        end
    }
}

--

if ritual_category == "MEAT_RITUAL" then
    local incident_mapping = {
        ["wh3_main_ritual_ogr_great_maw_bloody_and_raw"] = "wh3_main_incident_ritual_ogr_great_maw_bloody_and_raw",
        ["wh3_main_ritual_ogr_great_maw_come_and_get_it"] = "wh3_main_incident_ritual_ogr_great_maw_come_and_get_it",
        ["wh3_main_ritual_ogr_great_maw_fill_yer_bellies"] = "wh3_main_incident_ritual_ogr_great_maw_fill_yer_bellies",
        ["wh3_main_ritual_ogr_great_maw_give_me_gut_magic"] = "wh3_main_incident_ritual_ogr_great_maw_give_me_gut_magic"
    };

    cm:trigger_incident_with_targets(performing_faction_cqi, incident_mapping[ritual_key], 0, 0, ritual:ritual_target():get_target_force():general_character():command_queue_index(), 0, 0, 0);

--

local province_list = cm:model():world():province_list();

	for i = 0, province_list:num_items() - 1 do
		local current_province = province_list:item_at(i);
		local corruption_province_overrides_mapped = corruption_province_overrides[current_province:key()];
		local prm = current_province:pooled_resource_manager();

		-- add the overridden starting corruption, if it's specified
		if corruption_province_overrides_mapped then
			for corruption, amount_to_add in pairs(corruption_province_overrides_mapped) do
				cm:pooled_resource_factor_transaction(prm:resource("wh3_main_corruption_" .. corruption), "local_populace", amount_to_add);
			end;
		-- otherwise add corruption based on the province owners
		else
			local regions = current_province:regions();
			local num_regions = regions:num_items();
			local amount_to_add_per_region = 20;

			if num_regions == 1 then
				amount_to_add_per_region = 75;
			elseif num_regions == 2 then
				amount_to_add_per_region = 35;
			elseif num_regions == 3 then
				amount_to_add_per_region = 25;
			end;

			for j = 0, num_regions - 1 do
				local current_region = regions:item_at(j);
				local corruption_mapped = corruption_mapping[current_region:owning_faction():culture()];

				if not current_region:is_abandoned() and corruption_mapped then
					cm:pooled_resource_factor_transaction(prm:resource("wh3_main_corruption_" .. corruption_mapped), "local_populace", amount_to_add_per_region);
				end;
			end;
		end;
	end;
end;

--



for i, region in model_pairs(faction:region_list())


    local corruption_province_overrides_mapped = corruption_province_overrides[current_province:key()];
    local prm = current_province:pooled_resource_manager();

local amount_to_add_per_region = 20;

        if num_regions == 1 then
            amount_to_add_per_region = 75;
        elseif num_regions == 2 then
            amount_to_add_per_region = 35;
        elseif num_regions == 3 then
            amount_to_add_per_region = 25;
        end;

        for j = 0, num_regions - 1 do
            local current_region = regions:item_at(j);
            local corruption_mapped = corruption_mapping[current_region:owning_faction():culture()];

            if not current_region:is_abandoned() and corruption_mapped then
                cm:pooled_resource_factor_transaction(prm:resource("wh3_main_corruption_" .. corruption_mapped), "local_populace", amount_to_add_per_region);
            end;
        end;